name: Czech National Repository

on: [push]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.9 ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          mkdir pypi
          mkdir variables
          pip install --upgrade pip 'setuptools<58.0.0' py poetry
          poetry config virtualenvs.in-project true --local
          python -m venv .venv
          source .venv/bin/activate
          .venv/bin/pip install -U 'setuptools<58.0.0' pip wheel
          poetry update --lock
          poetry export --without-hashes -f requirements.txt -o pypi/requirements-build.txt
          poetry export --without-hashes --dev -f requirements.txt -o pypi/requirements-dev.txt
          .venv/bin/pip install -r pypi/requirements-build.txt
          poetry install -vvv --no-dev
          cp poetry.lock pypi/
      - name: Set project info to GITHUB_ENV
        run: |
          echo "PROJECT_NAME=$(poetry version | cut -d' ' -f1)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(poetry version -s)" >> $GITHUB_ENV
      - name: Generate project variables
        run: |
          echo "export PROJECT_NAME=$PROJECT_NAME" > variables/project_variables
          echo "export PROJECT_VERSION=$PROJECT_VERSION" >> variables/project_variables
          echo source variables/project_variables
          echo Building project: ${PROJECT_NAME}, version: ${PROJECT_VERSION}
      - name: Upload variables artifacts
        uses: actions/upload-artifact@v2
        with:
          name: variables
          path: variables
          retention-days: 14
      - name: Upload pypi artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pypi-requirements-${{ env.PROJECT_VERSION }}
          path: pypi
          retention-days: 14
      - name: Build project package
        run: poetry build
      - name: Upload package dist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}
          path: dist
          retention-days: 14
      - name: DEBUG
        run: ls -R ./
  publish:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Prepare directories
        run: |
          mkdir variables
          mkdir dist
          mkdir pypi
      - uses: actions/download-artifact@v2
        with:
          name: variables
          path: variables
      - name: Set project info from variables to ENV
        run: |
          source variables/project_variables
          echo "PROJECT_NAME=${PROJECT_NAME}" >> $GITHUB_ENV
          echo "PROJECT_VERSION=${PROJECT_VERSION}" >> $GITHUB_ENV
          echo Publishing project: ${PROJECT_NAME}, version: ${PROJECT_VERSION}
      - uses: actions/download-artifact@v2
        with:
          name: pypi-requirements-${{ env.PROJECT_VERSION }}
          path: pypi
      - uses: actions/download-artifact@v2
        with:
          name: dist-${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}
          path: pypi
      - name: Generate production requirements
        run: |
          cat pypi/requirements-build.txt > pypi/requirements.txt
          cat pypi/requirements.txt
      - name: Upload requirements and dist assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            pypi/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}